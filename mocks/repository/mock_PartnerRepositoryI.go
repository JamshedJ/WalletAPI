// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	entities "github.com/JamshedJ/WalletAPI/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockPartnerRepositoryI is an autogenerated mock type for the PartnerRepositoryI type
type MockPartnerRepositoryI struct {
	mock.Mock
}

type MockPartnerRepositoryI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPartnerRepositoryI) EXPECT() *MockPartnerRepositoryI_Expecter {
	return &MockPartnerRepositoryI_Expecter{mock: &_m.Mock}
}

// Conn provides a mock function with given fields:
func (_m *MockPartnerRepositoryI) Conn() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockPartnerRepositoryI_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockPartnerRepositoryI_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockPartnerRepositoryI_Expecter) Conn() *MockPartnerRepositoryI_Conn_Call {
	return &MockPartnerRepositoryI_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockPartnerRepositoryI_Conn_Call) Run(run func()) *MockPartnerRepositoryI_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPartnerRepositoryI_Conn_Call) Return(_a0 interface{}) *MockPartnerRepositoryI_Conn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPartnerRepositoryI_Conn_Call) RunAndReturn(run func() interface{}) *MockPartnerRepositoryI_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartnerByID provides a mock function with given fields: ctx, id
func (_m *MockPartnerRepositoryI) GetPartnerByID(ctx context.Context, id string) (*entities.Partner, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPartnerByID")
	}

	var r0 *entities.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Partner, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Partner); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPartnerRepositoryI_GetPartnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartnerByID'
type MockPartnerRepositoryI_GetPartnerByID_Call struct {
	*mock.Call
}

// GetPartnerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockPartnerRepositoryI_Expecter) GetPartnerByID(ctx interface{}, id interface{}) *MockPartnerRepositoryI_GetPartnerByID_Call {
	return &MockPartnerRepositoryI_GetPartnerByID_Call{Call: _e.mock.On("GetPartnerByID", ctx, id)}
}

func (_c *MockPartnerRepositoryI_GetPartnerByID_Call) Run(run func(ctx context.Context, id string)) *MockPartnerRepositoryI_GetPartnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPartnerRepositoryI_GetPartnerByID_Call) Return(_a0 *entities.Partner, _a1 error) *MockPartnerRepositoryI_GetPartnerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPartnerRepositoryI_GetPartnerByID_Call) RunAndReturn(run func(context.Context, string) (*entities.Partner, error)) *MockPartnerRepositoryI_GetPartnerByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPartnerRepositoryI creates a new instance of MockPartnerRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPartnerRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPartnerRepositoryI {
	mock := &MockPartnerRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
