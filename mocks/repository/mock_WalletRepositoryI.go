// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	dto "github.com/JamshedJ/WalletAPI/domain/dto"
	entities "github.com/JamshedJ/WalletAPI/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockWalletRepositoryI is an autogenerated mock type for the WalletRepositoryI type
type MockWalletRepositoryI struct {
	mock.Mock
}

type MockWalletRepositoryI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletRepositoryI) EXPECT() *MockWalletRepositoryI_Expecter {
	return &MockWalletRepositoryI_Expecter{mock: &_m.Mock}
}

// CheckWalletExists provides a mock function with given fields: ctx, conn, account
func (_m *MockWalletRepositoryI) CheckWalletExists(ctx context.Context, conn interface{}, account string) (bool, error) {
	ret := _m.Called(ctx, conn, account)

	if len(ret) == 0 {
		panic("no return value specified for CheckWalletExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) (bool, error)); ok {
		return rf(ctx, conn, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) bool); ok {
		r0 = rf(ctx, conn, account)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRepositoryI_CheckWalletExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckWalletExists'
type MockWalletRepositoryI_CheckWalletExists_Call struct {
	*mock.Call
}

// CheckWalletExists is a helper method to define mock.On call
//   - ctx context.Context
//   - conn interface{}
//   - account string
func (_e *MockWalletRepositoryI_Expecter) CheckWalletExists(ctx interface{}, conn interface{}, account interface{}) *MockWalletRepositoryI_CheckWalletExists_Call {
	return &MockWalletRepositoryI_CheckWalletExists_Call{Call: _e.mock.On("CheckWalletExists", ctx, conn, account)}
}

func (_c *MockWalletRepositoryI_CheckWalletExists_Call) Run(run func(ctx context.Context, conn interface{}, account string)) *MockWalletRepositoryI_CheckWalletExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockWalletRepositoryI_CheckWalletExists_Call) Return(_a0 bool, _a1 error) *MockWalletRepositoryI_CheckWalletExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRepositoryI_CheckWalletExists_Call) RunAndReturn(run func(context.Context, interface{}, string) (bool, error)) *MockWalletRepositoryI_CheckWalletExists_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function with given fields:
func (_m *MockWalletRepositoryI) Conn() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockWalletRepositoryI_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockWalletRepositoryI_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockWalletRepositoryI_Expecter) Conn() *MockWalletRepositoryI_Conn_Call {
	return &MockWalletRepositoryI_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockWalletRepositoryI_Conn_Call) Run(run func()) *MockWalletRepositoryI_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockWalletRepositoryI_Conn_Call) Return(_a0 interface{}) *MockWalletRepositoryI_Conn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepositoryI_Conn_Call) RunAndReturn(run func() interface{}) *MockWalletRepositoryI_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, conn, transaction
func (_m *MockWalletRepositoryI) CreateTransaction(ctx context.Context, conn interface{}, transaction *entities.Transaction) error {
	ret := _m.Called(ctx, conn, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *entities.Transaction) error); ok {
		r0 = rf(ctx, conn, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepositoryI_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type MockWalletRepositoryI_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - conn interface{}
//   - transaction *entities.Transaction
func (_e *MockWalletRepositoryI_Expecter) CreateTransaction(ctx interface{}, conn interface{}, transaction interface{}) *MockWalletRepositoryI_CreateTransaction_Call {
	return &MockWalletRepositoryI_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, conn, transaction)}
}

func (_c *MockWalletRepositoryI_CreateTransaction_Call) Run(run func(ctx context.Context, conn interface{}, transaction *entities.Transaction)) *MockWalletRepositoryI_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(*entities.Transaction))
	})
	return _c
}

func (_c *MockWalletRepositoryI_CreateTransaction_Call) Return(_a0 error) *MockWalletRepositoryI_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepositoryI_CreateTransaction_Call) RunAndReturn(run func(context.Context, interface{}, *entities.Transaction) error) *MockWalletRepositoryI_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTransaction provides a mock function with given fields: ctx, fn
func (_m *MockWalletRepositoryI) ExecuteTransaction(ctx context.Context, fn func(interface{}) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(interface{}) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepositoryI_ExecuteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransaction'
type MockWalletRepositoryI_ExecuteTransaction_Call struct {
	*mock.Call
}

// ExecuteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(interface{}) error
func (_e *MockWalletRepositoryI_Expecter) ExecuteTransaction(ctx interface{}, fn interface{}) *MockWalletRepositoryI_ExecuteTransaction_Call {
	return &MockWalletRepositoryI_ExecuteTransaction_Call{Call: _e.mock.On("ExecuteTransaction", ctx, fn)}
}

func (_c *MockWalletRepositoryI_ExecuteTransaction_Call) Run(run func(ctx context.Context, fn func(interface{}) error)) *MockWalletRepositoryI_ExecuteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(interface{}) error))
	})
	return _c
}

func (_c *MockWalletRepositoryI_ExecuteTransaction_Call) Return(_a0 error) *MockWalletRepositoryI_ExecuteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepositoryI_ExecuteTransaction_Call) RunAndReturn(run func(context.Context, func(interface{}) error) error) *MockWalletRepositoryI_ExecuteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetPartnerByID provides a mock function with given fields: ctx, id
func (_m *MockWalletRepositoryI) GetPartnerByID(ctx context.Context, id uuid.UUID) (*entities.Partner, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPartnerByID")
	}

	var r0 *entities.Partner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Partner, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Partner); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Partner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRepositoryI_GetPartnerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPartnerByID'
type MockWalletRepositoryI_GetPartnerByID_Call struct {
	*mock.Call
}

// GetPartnerByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockWalletRepositoryI_Expecter) GetPartnerByID(ctx interface{}, id interface{}) *MockWalletRepositoryI_GetPartnerByID_Call {
	return &MockWalletRepositoryI_GetPartnerByID_Call{Call: _e.mock.On("GetPartnerByID", ctx, id)}
}

func (_c *MockWalletRepositoryI_GetPartnerByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockWalletRepositoryI_GetPartnerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockWalletRepositoryI_GetPartnerByID_Call) Return(_a0 *entities.Partner, _a1 error) *MockWalletRepositoryI_GetPartnerByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRepositoryI_GetPartnerByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.Partner, error)) *MockWalletRepositoryI_GetPartnerByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, conn, params
func (_m *MockWalletRepositoryI) GetTransactions(ctx context.Context, conn interface{}, params *dto.GetTransactionsIn) ([]*entities.Transaction, error) {
	ret := _m.Called(ctx, conn, params)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []*entities.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *dto.GetTransactionsIn) ([]*entities.Transaction, error)); ok {
		return rf(ctx, conn, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *dto.GetTransactionsIn) []*entities.Transaction); ok {
		r0 = rf(ctx, conn, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, *dto.GetTransactionsIn) error); ok {
		r1 = rf(ctx, conn, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRepositoryI_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type MockWalletRepositoryI_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - conn interface{}
//   - params *dto.GetTransactionsIn
func (_e *MockWalletRepositoryI_Expecter) GetTransactions(ctx interface{}, conn interface{}, params interface{}) *MockWalletRepositoryI_GetTransactions_Call {
	return &MockWalletRepositoryI_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, conn, params)}
}

func (_c *MockWalletRepositoryI_GetTransactions_Call) Run(run func(ctx context.Context, conn interface{}, params *dto.GetTransactionsIn)) *MockWalletRepositoryI_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(*dto.GetTransactionsIn))
	})
	return _c
}

func (_c *MockWalletRepositoryI_GetTransactions_Call) Return(_a0 []*entities.Transaction, _a1 error) *MockWalletRepositoryI_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRepositoryI_GetTransactions_Call) RunAndReturn(run func(context.Context, interface{}, *dto.GetTransactionsIn) ([]*entities.Transaction, error)) *MockWalletRepositoryI_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletBalance provides a mock function with given fields: ctx, conn, account
func (_m *MockWalletRepositoryI) GetWalletBalance(ctx context.Context, conn interface{}, account string) (*entities.Wallet, error) {
	ret := _m.Called(ctx, conn, account)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletBalance")
	}

	var r0 *entities.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) (*entities.Wallet, error)); ok {
		return rf(ctx, conn, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string) *entities.Wallet); ok {
		r0 = rf(ctx, conn, account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, string) error); ok {
		r1 = rf(ctx, conn, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWalletRepositoryI_GetWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletBalance'
type MockWalletRepositoryI_GetWalletBalance_Call struct {
	*mock.Call
}

// GetWalletBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - conn interface{}
//   - account string
func (_e *MockWalletRepositoryI_Expecter) GetWalletBalance(ctx interface{}, conn interface{}, account interface{}) *MockWalletRepositoryI_GetWalletBalance_Call {
	return &MockWalletRepositoryI_GetWalletBalance_Call{Call: _e.mock.On("GetWalletBalance", ctx, conn, account)}
}

func (_c *MockWalletRepositoryI_GetWalletBalance_Call) Run(run func(ctx context.Context, conn interface{}, account string)) *MockWalletRepositoryI_GetWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *MockWalletRepositoryI_GetWalletBalance_Call) Return(_a0 *entities.Wallet, _a1 error) *MockWalletRepositoryI_GetWalletBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletRepositoryI_GetWalletBalance_Call) RunAndReturn(run func(context.Context, interface{}, string) (*entities.Wallet, error)) *MockWalletRepositoryI_GetWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWalletBalance provides a mock function with given fields: ctx, conn, wallet
func (_m *MockWalletRepositoryI) UpdateWalletBalance(ctx context.Context, conn interface{}, wallet *entities.Wallet) error {
	ret := _m.Called(ctx, conn, wallet)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWalletBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *entities.Wallet) error); ok {
		r0 = rf(ctx, conn, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWalletRepositoryI_UpdateWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWalletBalance'
type MockWalletRepositoryI_UpdateWalletBalance_Call struct {
	*mock.Call
}

// UpdateWalletBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - conn interface{}
//   - wallet *entities.Wallet
func (_e *MockWalletRepositoryI_Expecter) UpdateWalletBalance(ctx interface{}, conn interface{}, wallet interface{}) *MockWalletRepositoryI_UpdateWalletBalance_Call {
	return &MockWalletRepositoryI_UpdateWalletBalance_Call{Call: _e.mock.On("UpdateWalletBalance", ctx, conn, wallet)}
}

func (_c *MockWalletRepositoryI_UpdateWalletBalance_Call) Run(run func(ctx context.Context, conn interface{}, wallet *entities.Wallet)) *MockWalletRepositoryI_UpdateWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(*entities.Wallet))
	})
	return _c
}

func (_c *MockWalletRepositoryI_UpdateWalletBalance_Call) Return(_a0 error) *MockWalletRepositoryI_UpdateWalletBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWalletRepositoryI_UpdateWalletBalance_Call) RunAndReturn(run func(context.Context, interface{}, *entities.Wallet) error) *MockWalletRepositoryI_UpdateWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletRepositoryI creates a new instance of MockWalletRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletRepositoryI {
	mock := &MockWalletRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
